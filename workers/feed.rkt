#lang racket
(require
  (prefix-in x: xml)
  net/url
  srfi/19
  "utils.rkt")

(define/contract (get-podcast-info feed-url)
  (-> url? (or/c hash? string?))
  (define/contract (time-str->secs time-str)
    (-> string? number?)
    (let loop ((rem (reverse (map string->number (string-split time-str ":")))) (acc 0))
      (if (null? rem)
          acc
          (loop (map (lambda (x) (* 60 x)) (cdr rem)) (+ acc (car rem))))))
  (let ((feed-url-or-msg (resolve-feed-url-or-fail feed-url)))
    (if (url? feed-url-or-msg)
        (let ((feed-xexpr (x:string->xexpr (port->string (get-pure-port feed-url-or-msg)))))
          (hash-set (parse-feed feed-xexpr)
                    'feed_url
                    (url->string feed-url-or-msg)))
        feed-url-or-msg)))
                  

(define/contract (parse-feed feed-xexpr)
  (-> x:xexpr? hash?)
  (define/contract (feed-alist->feed-hash feed-alist)
    (-> (listof (cons/c symbol? any/c)) (hash/c symbol? any/c))
    (let loop ((rem feed-alist) (acc (hash)))
      (cond
        ((null? rem) acc)
        ((equal? (caar rem) 'episodes)
         (loop (cdr rem)
               (hash-update acc
                            'episodes
                            (lambda (eps) (append eps (list (cdar rem))))
                            '())))
        ((not (hash-has-key? acc (caar rem)))
             (loop (cdr rem) (hash-set acc (caar rem) (cdar rem))))
            ((equal? (hash-ref acc (caar rem)) (cdar rem))
             (loop (cdr rem) acc))
            ((and (string? (hash-ref acc (caar rem)))
                  (string-prefix? (cdar rem) "<![CDATA["))
             (loop (cdr rem) (hash-set acc (caar rem) (cdar rem))))
            ((list? (caar rem))
             (loop (cdr rem) (hash-set acc (caar rem) (remove-duplicates (append (cdar rem) (hash-ref acc (caar rem)))))))
            (else (loop (cdr rem) acc)))))
  (match feed-xexpr
    ((list 'rss (list (list attr-names attr-values) ...) content ...)
     (feed-alist->feed-hash
      (apply append (map parse-feed content))))
    ((list 'channel (list (list attr-names attr-values) ...) content ...)
     (apply append (map parse-feed content)))
    ((list 'item _ _ ...)
     (list (cons 'episodes (parse-episode feed-xexpr))))
    ((list 'title _ content ...)
     (list (cons 'title (apply string-append (map parse-text content)))))
    ((list (or 'description 'itunes:summary) '() content ...)
     (list (cons 'description (apply string-append (map parse-text content)))))
    ((list 'itunes:keywords '() content ...)
     (list (cons 'tags (string-split (apply string-append (map parse-text content)) ","))))
    ((list 'itunes:explicit _ (pregexp #px"^(?i:true|yes)$"))
     (list (cons 'explicit #t)))
    ((list 'itunes:explicit _ (pregexp #px"^(?i:false|no|clean)$"))
     (list (cons 'explicit #F)))
    ((list 'itunes:image (list (list attr-names attr-vals) ...) )
     (list (cons 'cover_art_url (cdr (assoc 'href (map cons attr-names attr-vals))))))
    ((list 'image _ content ...)
     (parse-image-tag feed-xexpr))
    (_ '())))

(define episode-tags/alist
  (list
   (cons 'title 'title)
   (cons 'description '(description itunes:summary))
   (cons 'tags 'itunes:keywords)
   (cons 'duration 'itunes:duration)))

(define/contract (parse-episode ep-xexpr)
  (-> x:xexpr? (or/c hash? string?))
  (define/contract (ep-alist->ep-hash ep-alist)
    (-> (listof (cons/c symbol? any/c)) (hash/c symbol? any/c))
    (let loop ((rem ep-alist) (acc (hash)))
      (cond ((null? rem) acc)
            ((not (hash-has-key? acc (caar rem)))
             (loop (cdr rem) (hash-set acc (caar rem) (cdar rem))))
            ((equal? (hash-ref acc (caar rem)) (cdar rem))
             (loop (cdr rem) acc))
            ((and (string? (hash-ref acc (caar rem)))
                  (string-prefix? (cdar rem) "<![CDATA["))
             (loop (cdr rem) (hash-set acc (caar rem) (cdar rem))))
            ((list? (caar rem))
             (loop (cdr rem) (hash-set acc (caar rem) (remove-duplicates (append (cdar rem) (hash-ref acc (caar rem)))))))
            (else (loop (cdr rem) acc)))))
  (define/contract (parse-duration duration/string)
    (-> string? integer?)
    (let loop ((rem (map (lambda (x) (string->number x 10))
                         (reverse (string-split duration/string ":"))))
               (acc 0))
      (if (null? rem)
          acc
          (loop (map (lambda (n) (* 60 n)) (cdr rem)) (+ (car rem) acc)))))
   (match ep-xexpr
     ((list 'item _ content ...)
      (let ((alist (apply append
                          (map parse-episode content))))
        (if (assoc 'url alist)
            (ep-alist->ep-hash alist)
            (format "Item ~s is not a well-formed podcast episode." (cdr (assoc 'title alist))))))
    ((list 'title '() content ...)
     (list (cons 'title (apply string-append (map parse-text content)))))
    ((list (or 'description 'itunes:summary) '() content ...)
     (list (cons 'description (apply string-append (map parse-text content)))))
    ((list 'pubDate '() content ...)
     (list(cons 'date_published (rfc2822->sql-timestampz (apply string-append (map parse-text content))))))
    ((list 'itunes:keywords '() content ...)
     (list (cons 'tags (string-split (apply string-append (map parse-text content)) ","))))
    ((list 'itunes:duration '() content ...)
     (list (cons 'duration (parse-duration (apply string-append (map parse-text content))))))
     ((list 'itunes:author '() content ...)
      (list (cons 'author  (apply string-append (map parse-text content)))))
    ((list 'enclosure (list (list attr-names attr-vals) ...) _ ...)
     (let ((attrs (map cons attr-names attr-vals)))
       (list (cons 'url (cdr (or (assoc 'href attrs)
                                 (assoc 'url attrs))))
             (cons 'file_mimetype (cdr (assoc 'type attrs))))))
    (_ (list))))

(define/contract (parse-text an-xexpr)
  (-> x:xexpr? string?)
  (match an-xexpr
    ((struct x:cdata (_ _ text)) text)
    ((pregexp #px"^\\s*$") "")
    ((? string? text) text)
    ((? x:valid-char? text) (string (integer->char text)))))
(define/contract (parse-image-tag i-xexpr)
  (-> x:xexpr? (listof (cons/c symbol? string?)))
  (match i-xexpr
    ((list 'image _ content ...)
     (apply append (map parse-image-tag content)))
    ((list 'url _ content ...)
     (list (cons 'cover_art_url (apply string-append (map parse-text content)))))
    (_ '())))

(provide get-podcast-info)